library(coda)
p1 <- list_chains1 %>% select(parms) %>% tidyr::gather(variable, value) %>%
ggplot(aes(value)) + geom_histogram(bins = 51) +
#geom_vline(data=df2,aes(xintercept=value),col="red") +
facet_wrap(~variable, scales = 'free_x')
p1
ggsave(paste0(save_wd,"/",run_name,"_historgms.pdf"),height=5,width=7,units="in",dpi=300)
# *** relationship between infection and age
## The MCMC framework saves only present infections (ie. entries for the infection
## history matrix of 1) to save space ie. sparse format. The output chain
## should therefore be filled with the missing 0s before extensive analysis
## to avoid bias.
inf_chain <- pad_inf_chain(inf_chain)
## Using data tables to get total number of infections
## per individual
data.table::setkey(inf_chain, "i", "sampno","chain_no")
inf_chain <- chains$inf_chain
## Read in chains for trace plot
# requires
#tmp <- "/Users/lsh1603970/GitHub/serosolver_norovirus_simulation/chains/sim_noro" # works fine
#chains <- load_mcmc_chains(tmp,convert_mcmc=TRUE,burnin = mcmc_pars["adaptive_period"],unfixed = TRUE)
chains <- load_mcmc_chains(chain_wd,convert_mcmc=TRUE,burnin = mcmc_pars["adaptive_period"],unfixed = TRUE)
pdf(paste0(save_wd,"/",run_name,"_chain.pdf"))
plot(as.mcmc.list(chains$theta_list_chains))
## Read in chains for all other plots
chains <- load_mcmc_chains(chain_wd,convert_mcmc=FALSE,burnin = mcmc_pars["adaptive_period"],unfixed = FALSE)
chain <- as.data.frame(chains$theta_chain)
inf_chain <- chains$inf_chain
#summary stats
library(coda)
list_chains1 <- chains[[1]]
# nore mu_s is mu_short
tmp <- summary(chain[,c("mu","mu_short",
"tau","sigma1",
"sigma2",
"wane",
"error","total_infections",
"lnlike","prior_prob")])
median(chain[,c("lnlike")],)
vals <- c("mu","mu_short",
"tau","sigma1",
"sigma2",
"wane",
"error","total_infections",
"lnlike","prior_prob")
t1 <- round(sapply(chain[vals],quantile,probs=c(0.5,0.025,0.975)),digits = 3)
write.csv(t(t1),file=paste0(save_wd,"/",run_name,"_summary.csv"),row.names = T)
# *** how well do we re-estimate parameters?
# this should be coded properly...
#df2 <- data.frame(variable=par_tab$names[par_tab$fixed==0],value=par_tab$values[par_tab$fixed==0])
#df2 <- data.frame(variable=c("mu","tau","sigma1","mu_short","error"),value=c(5,0.5,0.2,1,1,2))
parms <- par_tab$names[par_tab$fixed==0][1:7]
p1 <- list_chains1 %>% select(parms) %>% tidyr::gather(variable, value) %>%
ggplot(aes(value)) + geom_histogram(bins = 51) +
#geom_vline(data=df2,aes(xintercept=value),col="red") +
facet_wrap(~variable, scales = 'free_x')
p1
ggsave(paste0(save_wd,"/",run_name,"_historgms.pdf"),height=5,width=7,units="in",dpi=300)
# *** relationship between infection and age
## The MCMC framework saves only present infections (ie. entries for the infection
## history matrix of 1) to save space ie. sparse format. The output chain
## should therefore be filled with the missing 0s before extensive analysis
## to avoid bias.
inf_chain <- pad_inf_chain(inf_chain)
## Using data tables to get total number of infections
## per individual
data.table::setkey(inf_chain, "i", "sampno","chain_no")
n_inf_chain_i <- inf_chain[, list(V1 = sum(x)), by = key(inf_chain)]
setkey(n_inf_chain_i, "i")
n_inf_chain <- n_inf_chain_i[,list(median_infs=median(V1)),
by=key(n_inf_chain_i)]
colnames(n_inf_chain)[1] <- "individual"
setkey(n_inf_chain, "individual")
## Merge with titre data to recover individual
## id
titre_dat1 <- data.table(titre_dat)
setkey(titre_dat1, "individual")
titre_dat1 <- merge(n_inf_chain, titre_dat1)
## Split individuals into age groups and plot summaries
titre_dat1$age <- titre_dat1$samples - titre_dat1$DOB
titre_dat1$infs_per_life <- titre_dat1$median_infs/(titre_dat1$age+1)
titre_dat1$age_group <- cut(titre_dat1$age, breaks = c(0,1,2,3,4,5,6,8),right = F)
table(titre_dat1$age,titre_dat1$age_group)
age_dist <- ggplot(titre_dat1 %>% filter(virus==2009)) +
geom_boxplot(aes(group=age_group,y=infs_per_life,x=age_group),fill="cornflowerblue") +
#theme_classic() +
ylab("Median number of infections\n per 1 years alive") +
xlab("Age group")
age_dist
ggsave(paste0(save_wd,"/",run_name,"_inf_age.pdf"),age_dist,height=4,width=5,units="in",dpi=300)
tmp <- titre_dat1 %>% filter(virus==2009) %>%
group_by(age_group,samples) %>% summarise(n=n(),medn=mean(median_infs))
ggplot(tmp,aes(y=age_group,x=samples,fill=medn)) + geom_tile() +
scale_fill_gradientn(colors=(hcl.colors(10, "YlGnBu")))
## Plot kinetics parameter estimates and number of infections
p1 <- plot_posteriors_theta(chain, par_tab, burnin=0,samples=100,TRUE,FALSE,FALSE, TRUE,"")
p_total_inf <- plot_total_number_infections(inf_chain,FALSE)
ggsave(paste0(save_wd,"/",run_name,"_total_inf.pdf"),p_total_inf[[1]],height=5,width=7,units="in",dpi=300)
p_cumu_infs <- generate_cumulative_inf_plots(inf_chain,indivs=1:5,
#real_inf_hist=sim_data$infection_histories,
strain_isolation_times = strain_isolation_times)
ggsave(paste0(save_wd,"/",run_name,"_inf_hists.pdf"),p_cumu_infs[[1]],height=8,width=7,units="in",dpi=300)
n_alive <- get_n_alive_group(titre_dat,strain_isolation_times)
# Extract infection history chain
inf_chain <- chains$inf_chain
## Look at inferred attack rates
p_ar <- plot_attack_rates(inf_chain, titre_dat,
strain_isolation_times, pad_chain=TRUE,
plot_den = TRUE,
by_val = 2,
prior_pars=list(prior_version=prior_version,
alpha=par_tab[par_tab$names=="alpha","values"],
beta=par_tab[par_tab$names=="beta","values"]))
print(p_ar)
ggsave(paste0(save_wd,"/",run_name,"_ar.pdf"),p_ar,height=7,width=8,units="in",dpi=300)
p_ar$layers
head(p_ar$data)
tmp <- matrix(unlist(tapply(p_ar$data$V1,p_ar$data$j,quantile,probs=c(0.025,0.5,0.975))),nrow=3)
write.csv(tmp,file=paste0(save_wd,"/",run_name,"_attack_rate.csv"),row.names = T)
## Plot model fits
titre_preds <- get_titre_predictions(chain = chain[chain$chain_no == 3,],
infection_histories = inf_chain[inf_chain$chain_no == 3,],
titre_dat = titre_dat,
individuals = unique(titre_dat$individual),
antigenic_map = antigenic_map,
par_tab = par_tab,expand_titredat=FALSE)
use_indivs <- sample(unique(titre_dat$individual), 20)
#figure out what is happening here
tmp1 <- titre_preds$predictions[titre_preds$predictions$individual %in% use_indivs,]
tmp2 <- titre_preds$predicted_observations[titre_preds$predicted_observations$individual %in% use_indivs,]
titre_pred_p <- ggplot(tmp1)+
geom_ribbon(data=tmp2,
aes(x=virus,ymin=lower,ymax=upper),fill="grey90") +
geom_ribbon(aes(x=virus,ymin=lower, ymax=upper),fill="gray70")+
geom_line(aes(x=virus, y=median))+
geom_point(aes(x=virus, y=titre))+
coord_cartesian(ylim=c(0,8))+
ylab("log titre") +
xlab("Time of virus circulation") +
theme_classic() +
facet_wrap(~individual)
titre_pred_p
ggsave(paste0(save_wd,"/",run_name,"_titre_fits.pdf"),titre_pred_p,height=7,width=8,units="in",dpi=300)
# I think the output above would be worthwhile exploring a bit more
# Are there any characteristics that are not well explained?
names(titre_preds)
head(titre_preds$predictions)
predat <- titre_preds$predictions
predat$age <- predat$samples - predat$DOB
predat$error <- predat$titre - predat$median
summary(predat$error)
m1 <- aov(error ~ virus + samples + age,data = predat )
summary(m1)
p1 <- ggplot(predat,aes(x=titre,y=median)) + geom_point() +
facet_grid(rows=vars(virus),cols=vars(samples)) +
geom_abline(intercept=0,slope=1,lty=2)
p1
ggsave(paste0(save_wd,"/",run_name,"_titre_fits_grid.pdf"),p1,height=7,width=8,units="in",dpi=300)
1/0/46
1/0.46
1/0/649
1/0.649
1/0.0.461
1/0.461
library(ggplot2)
main_wd <-  "/Users/lsh1603970/GitHub/serosolver_norovirus" #"~/Documents/norovirus_test/"
ar_db <- read.csv("data/data_t2b/data_t2b_attack_rate.csv")
ar_kd <- read.csv("data/data_t2b/data_t3b_attack_rate.csv")
setwd(main_wd)
ar_db <- read.csv("data/data_t2b/data_t2b_attack_rate.csv")
ar_kd <- read.csv("data/data_t2b/data_t3b_attack_rate.csv")
ar_kd <- read.csv("data/data_t3b/data_t3b_attack_rate.csv")
ar_kd <- read.csv("data/data_t3/data_t3_attack_rate.csv")
ar_db
names(ar_db) <- c("estimates",c(2002:2012))
ar_db
names(ar_db) <- c("estimates",c(2002:2012),"prior")
names(ar_kd) <- c("estimates",c(2002:2012),"prior")
ar_db$estimates <- c("2.5%","50.0%","97.5%",)
ar_db$estimates
ar_db$estimates <- c("2.5%","50.0%","97.5%")
ar_kd$estimates <- c("2.5%","50.0%","97.5%")
ardb2 <- melt(ar_db, id=c("estimates"))
ardb2
ardb2$model <- "Debbink"
arkd2 <- melt(ar_kd, id=c("estimates"))
arkd2$model <- "Kendra"
dat <- rbind(ardb2,arkd2)
#make plot
ggplot(dat,aes(x=variable,y=value,group=model,col=model)) + geom_point()
View(dat)
#make plot
ggplot(dat,aes(x=variable,y=value,group=model,col=model)) + geom_point()
dev.off()
dev.off()
dev.off()
#make plot
ggplot(dat,aes(x=variable,y=value,group=model,col=model)) + geom_point()
View(ar_kd)
ar_kd <- read.csv("data/data_t3/data_t3_attack_rate.csv")
names(ar_kd) <- c("estimates",c(2001:2012),"prior")
ar_kd$estimates <- c("2.5%","50.0%","97.5%")
library(reshape)
ardb2 <- melt(ar_db, id=c("estimates"))
ardb2$model <- "Debbink"
arkd2 <- melt(ar_kd, id=c("estimates"))
arkd2$model <- "Kendra"
dat <- rbind(ardb2,arkd2)
#make plot
ggplot(dat,aes(x=variable,y=value,group=model,col=model)) + geom_point()
dat$estimates
#make plot
ggplot(dat,aes(x=variable,y=value,group=model,col=model)) + geom_point() +
geom_errorbar(aes(ymin="2.5%", ymax="97.5%"), colour="black", width=.1)
ar_db <- t(read.csv("data/data_t2b/data_t2b_attack_rate.csv"))
View(ar_db)
ar_db <- t(read.csv("data/data_t2b/data_t2b_attack_rate.csv",header=T))
ar_db <- t(read.csv("data/data_t2b/data_t2b_attack_rate.csv",header=T))[-1,]
names(ar_db) <- c("2.5%","50.0%","97.5%")
ar_db <- t(read.csv("data/data_t2b/data_t2b_attack_rate.csv",header=T))[-1,]
names(ar_db) <- c("2.5%","50.0%","97.5%")
ar_db$year <- c(c(2002:2012),"prior")
ar_db <- t(read.csv("data/data_t2b/data_t2b_attack_rate.csv",header=T))[-1,]
View(ar_db)
ar_db <- as.data.frame(t(read.csv("data/data_t2b/data_t2b_attack_rate.csv",header=T))[-1,])
names(ar_db) <- c("2.5%","50.0%","97.5%")
ar_db$year <- c(c(2002:2012),"prior")
ar_kd <- as.data.frame(t(read.csv("data/data_t3/data_t3_attack_rate.csv",header=T))[-1,]))
ar_kd <- as.data.frame(t(read.csv("data/data_t3/data_t3_attack_rate.csv",header=T))[-1,])
names(ar_kd) <- c("2.5%","50.0%","97.5%")
ar_kd$year <- c(c(2001:2012),"prior")
# library(reshape)
# ardb2 <- melt(ar_db, id=c("estimates"))
ardb$model <- "Debbink"
#arkd2 <- melt(ar_kd, id=c("estimates"))
ar_kd$model <- "Kendra"
dat <- rbind(ar_db2,ar_kd)
dat <- rbind(ar_db,ar_kd)
# library(reshape)
# ardb2 <- melt(ar_db, id=c("estimates"))
ar_db$model <- "Debbink"
dat <- rbind(ar_db,ar_kd)
#make plot
ggplot(dat,aes(x=year,y="50.0%",group=model,col=model)) + geom_point() +
geom_errorbar(aes(ymin="2.5%", ymax="97.5%"), colour="black", width=.1)
dat$nudge <- 0
dat$nudge[dat$model == "Kendra"] <- 0.1
#make plot
ggplot(dat,aes(x=year+nudge,y="50.0%",group=model,col=model)) + geom_point() +
geom_errorbar(aes(ymin="2.5%", ymax="97.5%"), colour="black", width=.1)
dat$nudge
dat$year <- as.numeric(dat$year)
#make plot
ggplot(dat,aes(x=year+nudge,y="50.0%",group=model,col=model)) + geom_point() +
geom_errorbar(aes(ymin="2.5%", ymax="97.5%"), colour="black", width=.1)
names(dat)
ar_db <- as.data.frame(t(read.csv("data/data_t2b/data_t2b_attack_rate.csv",header=T))[-1,])
names(ar_db) <- c("lwr","med","upr")
ar_db$year <- c(c(2002:2012),"prior")
ar_kd <- as.data.frame(t(read.csv("data/data_t3/data_t3_attack_rate.csv",header=T))[-1,])
names(ar_kd) <- c("lwr","med","upr")
ar_kd$year <- c(c(2001:2012),"prior")
# library(reshape)
# ardb2 <- melt(ar_db, id=c("estimates"))
ar_db$model <- "Debbink"
#arkd2 <- melt(ar_kd, id=c("estimates"))
ar_kd$model <- "Kendra"
dat <- rbind(ar_db,ar_kd)
dat$nudge <- 0
dat$nudge[dat$model == "Kendra"] <- 0.1
dat$year <- as.numeric(dat$year)
#make plot
ggplot(dat,aes(x=year+nudge,y=med,group=model,col=model)) + geom_point() +
geom_errorbar(aes(ymin=lwr, ymax=upr), colour="black", width=.1)
dat <- rbind(ar_db,ar_kd)
dat$nudge <- 0
dat$nudge[dat$model == "Kendra"] <- 0.15
dat$year <- as.numeric(dat$year)
#make plot
ggplot(dat,aes(x=year+nudge,y=med,group=model,col=model)) + geom_point() +
geom_errorbar(aes(ymin=lwr, ymax=upr), colour="black", width=.1)
#make plot
ggplot(dat,aes(x=year+nudge,y=med,group=model,col=model)) + geom_point(size=2) +
geom_errorbar(aes(ymin=lwr, ymax=upr), colour="black", width=.1)
#make plot
ggplot(dat,aes(x=year+nudge,y=med,group=model,col=model)) + geom_point(cex=2) +
geom_errorbar(aes(ymin=lwr, ymax=upr), colour="black", width=.1)
#make plot
ggplot(dat,aes(x=year+nudge,y=med,group=model,col=model)) + geom_point(cex=3) +
geom_errorbar(aes(ymin=lwr, ymax=upr), colour="black", width=.1)
#make plot
ggplot(dat %>% filter(year>2001),aes(x=year+nudge,y=med,group=model,col=model)) + geom_point(cex=3) +
geom_errorbar(aes(ymin=lwr, ymax=upr), colour="black", width=.1) +
xlab("Year") + ylab("Annual Attack Rate")
#make plot
ggplot(dat %>% filter(year>2001),aes(x=year+nudge,y=med,group=model,col=model)) + geom_point(cex=3) +
geom_errorbar(aes(ymin=lwr, ymax=upr), colour="black", width=.1) +
geom_point(cex=3) +
xlab("Year") + ylab("Annual Attack Rate")
pdf("annual_attack_rate_combined.pdf",height=4,width=6)
p1
#make plot
p1 <- ggplot(dat %>% filter(year>2001),aes(x=year+nudge,y=med,group=model,col=model)) + geom_point(cex=3) +
geom_errorbar(aes(ymin=lwr, ymax=upr), colour="black", width=.1) +
geom_point(cex=3) +
xlab("Year") + ylab("Annual Attack Rate")
pdf("annual_attack_rate_combined.pdf",height=4,width=6)
p1
dev.off()
run_name <- "data_noro"
main_wd <- "~/GitHub/serosolver_norovirus_2sera/"
setwd(main_wd)
chain_wd <- paste0(main_wd,"/chains_avidity/",run_name)
save_wd <- paste0(main_wd,"/figures/chain_plots_avidity/") # where the data are?
titre_dat <- read_csv(file=paste0(save_wd,"/",run_name,"_titre_data.csv"))
run <- 2
chain_wd_use <- paste0(chain_wd, "_",run_names[run])
save_wd_use <- paste0(save_wd, "_",run_names[run])
run_name <- "data_noro"
chain_wd <- paste0(main_wd,"/chains_avidity/",run_name)
chain_wd
run_name <- "data_t2_both"
main_wd <- "~/GitHub/serosolver_norovirus_2sera/"
setwd(main_wd)
chain_wd <- paste0(main_wd,"/chains_avidity/",run_name)
save_wd <- paste0(main_wd,"/figures/chain_plots_avidity/") # where the data are?
chain_wd
titre_dat <- read_csv(file=paste0(save_wd,"/",run_name,"_titre_data.csv"))
run <- 2
chain_wd_use <- paste0(chain_wd, "_",run_names[run])
chain_wd_use <- paste0(chain_wd, "_",run_name[run])
save_wd_use <- paste0(save_wd, "_",run_name[run])
## Read in chains for trace plot
chains <- load_mcmc_chains(chain_wd_use,convert_mcmc=TRUE,burnin = mcmc_pars["adaptive_period"],unfixed = TRUE)
chain_wd_use
chain_wd_use
chain_wd_use <- paste0(chain_wd, "_",run,"_chain")
chain_wd_use
## Read in chains for trace plot
chains <- load_mcmc_chains(chain_wd_use,convert_mcmc=TRUE,burnin = mcmc_pars["adaptive_period"],unfixed = TRUE)
# MCMC settings, not super important but can be tweaked
mcmc_pars <- c("save_block"=100,"thin"=10,"thin_hist"=50,
"iterations"=200000,
"adaptive_period"=50000,
"burnin"=0,"switch_sample"=2,"hist_switch_prob"=0.05,
"year_swap_propn"=0.8,"swap_propn"=0.5,
"inf_propn"=0.5,"hist_sample_prob"=1,"move_size"=3, "hist_opt"=0,
"popt"=0.44,"popt_hist"=0.44,"opt_freq"=2000,propose_from_prior=TRUE)
## Read in chains for trace plot
chains <- load_mcmc_chains(chain_wd_use,convert_mcmc=TRUE,burnin = mcmc_pars["adaptive_period"],unfixed = TRUE)
run_name <- "data_t2"
main_wd <- "~/GitHub/serosolver_norovirus_2sera/"
setwd(main_wd)
chain_wd <- paste0(main_wd,"/chains_avidity/",run_name)
save_wd <- paste0(main_wd,"/figures/chain_plots_avidity/") # where the data are?
titre_dat <- read_csv(file=paste0(save_wd,"/",run_name,"_titre_data.csv"))
# MCMC settings, not super important but can be tweaked
mcmc_pars <- c("save_block"=100,"thin"=10,"thin_hist"=50,
"iterations"=200000,
"adaptive_period"=50000,
"burnin"=0,"switch_sample"=2,"hist_switch_prob"=0.05,
"year_swap_propn"=0.8,"swap_propn"=0.5,
"inf_propn"=0.5,"hist_sample_prob"=1,"move_size"=3, "hist_opt"=0,
"popt"=0.44,"popt_hist"=0.44,"opt_freq"=2000,propose_from_prior=TRUE)
run <- 2
chain_wd_use <- paste0(chain_wd, "_",run_names[run])
# plots
run_names <- c("obs1","both")
run <- 2
run_name_use <- paste0(run_name, "_", run_names[run])
chain_wd_use <- paste0(chain_wd, "_",run_names[run])
save_wd_use <- paste0(save_wd, "_",run_name[run])
## Read in chains for trace plot
chains <- load_mcmc_chains(chain_wd_use,convert_mcmc=TRUE,burnin = mcmc_pars["adaptive_period"],unfixed = TRUE)
plot(as.mcmc.list(chains$theta_list_chains))
pdf(paste0(save_wd_use,"/",run_name_use,"_chain.pdf"))
## Plot posterior densities and compare to ground truth parameters
theta_chain <- chains$theta_chain
theta_chain_melted <- reshape2::melt(as.data.frame(theta_chain),id.vars=c("sampno","chain_no")) %>% as_tibble()
par_tab_tmp <-  par_tab_use %>% group_by(names) %>% mutate(n=1:n()) %>% mutate(variable = ifelse(n > 1, paste0(names,".",n-1), names)) %>%
select(-n) %>% mutate(obs_type_p = paste0("Obs type: ", obs_type))
par_tab_use <- par_tab[par_tab$obs_type %in% obs_type_use,]
## Set up parameter table
par_tab <- read.csv("par_tab_base_new.csv",stringsAsFactors=FALSE)
par_tab <- par_tab[par_tab$names != "phi",]
par_tab[par_tab$names %in% c("alpha","beta"),c("values")] <- c(1,2) ## Can also try c(1,1), or something informative. Just the parameters of a beta distribution which acts as the prior on the per-time attack rate.
## Just some setup of the parameter table to get parameters vaguely like you showed me
par_tab$fixed <- 1
par_tab[par_tab$names %in% c("mu","tau","sigma1","obs_sd","mu_short","wane","sigma2"),"fixed"] <- 0
## Create some random measurement offsets -- these add a systematic shift to each observed variant. Only those sampled variant years have offsets, the rest are 0
## These are unknown parameters to be estimated, assuming the offsets are drawn from ~ norm(0, 1)
par_tab_rhos <- data.frame(names="rho",values=rep(0,length(sampled_viruses)),fixed=0,steps=0.1,
lower_bound=-3,upper_bound=3,lower_start=-1,
upper_start=1,type=3)
sampled_viruses <- c(2002,2006,2009,2012)
## Create some random measurement offsets -- these add a systematic shift to each observed variant. Only those sampled variant years have offsets, the rest are 0
## These are unknown parameters to be estimated, assuming the offsets are drawn from ~ norm(0, 1)
par_tab_rhos <- data.frame(names="rho",values=rep(0,length(sampled_viruses)),fixed=0,steps=0.1,
lower_bound=-3,upper_bound=3,lower_start=-1,
upper_start=1,type=3)
par_tab_rhos$values <- rnorm(length(sampled_viruses), 1)
measurement_indices <- seq_along(sampled_viruses)
measurement_indices <- data.frame(virus = sampled_viruses,
obs_type = rep(1:n_obs_types, each=length(sampled_viruses)),
rho_index=1:(length(sampled_viruses)*n_obs_types))
n_obs_types <- 2
measurement_indices <- data.frame(virus = sampled_viruses,
obs_type = rep(1:n_obs_types, each=length(sampled_viruses)),
rho_index=1:(length(sampled_viruses)*n_obs_types))
par_tab <- bind_rows(par_tab, par_tab_rhos)
## Extend parameter table for each aditional observation type
par_tab$obs_type <- 1
antigenic_map_tmp <- antigenic_map
antigenic_map$obs_type <- 1
par_tab_tmp <- par_tab
head(theta_chain_melted)
head(theta_chain)
# can I plot correlation here?
ggplot(theta_chain %>% filter(chain_no == 1),aes(x=mu,y=mu.1)) + geom_point()
# can I plot correlation here?
ggplot(as.data.frame(theta_chain) %>% filter(chain_no == 1),aes(x=mu,y=mu.1)) + geom_point()
# can I plot correlation here?
tmp <- as.data.frame(theta_chain) %>% filter(chain_no == 1)
ggplot(tmp,aes(x=mu,y=mu.1)) + geom_point()
dev.off()
dev.off()
ggplot(tmp,aes(x=mu,y=mu.1)) + geom_point()
View(tmp)
# can I plot correlation here?
library(cowplot)
p1 <- ggplot(tmp,aes(x=mu,y=mu.1)) + geom_point()
p2 <- ggplot(tmp,aes(x=mu_short,y=mu_short.1)) + geom_point()
plot_grid(p1,p2)
p1 <- ggplot(tmp,aes(x=mu,y=mu.1)) + geom_point()
p2 <- ggplot(tmp,aes(x=mu_short,y=mu_short.1)) + geom_point()
p3 <- ggplot(tmp,aes(x=wane,y=wane.1)) + geom_point()
p4 <- ggplot(tmp,aes(x=sigma1,y=sigma1.1)) + geom_point()
plot_grid(p1,p2,p3,p4)
# mega correlation estimates
vals <- names(tmp)
names(tmp)
# mega correlation estimates
vals <- names(tmp)[5:10][21:26]
vals
# mega correlation estimates
vals <- names(tmp)
vals_use <- vals[5:10][21:26]
vals_use <- vals[c(5:10),c(21:26)]
c(5:10),c(21:26)
c(5:10)
c(c(5:10),c(21:26))
vals_use <- vals[c(c(5:10),c(21:26))]
vals_use
cor_dat <- tmp[,vals_use]
res <- cor(cor_dat)
round(res, 2)
res <- rcor(cor_dat)
library(Hmisc)
install.packages("Hmisc")
res <- rcorr(cor_dat)
library(Hmisc)
res <- rcorr(as.matrix(cor_dat))
round(res$r, 2)
round(res$p, 2)
round(res$P, 2)
round(res$P, 3)
install.packages("PerformanceAnalytics")
library("PerformanceAnalytics")
chart.Correlation(cor_dat, histogram=TRUE, pch=19)
dim(vals)[1]
dim(tmp)[1]
?sampe
?sample
ss <- sample(1000,dim(tmp)[1],replace = FALSE)
dim(tmp)[1]
ss <- sample(dim(tmp)[1],1000,replace = FALSE)
cor_dat <- tmp[ss,vals_use]
res <- rcorr(as.matrix(cor_dat))
chart.Correlation(cor_dat, histogram=TRUE, pch=20)
p1 <- chart.Correlation(cor_dat, histogram=TRUE, pch=20)
pdf(paste0(save_wd_use,"/",run_name_use,"_correlation_plot.pdf"),height=8,width=9)
paste0(save_wd_use,"/",run_name_use,"_correlation_plot.pdf")
save_wd_use
run_name_use
pdf(paste0(run_name_use,"_correlation_plot.pdf"),height=8,width=9)
p1
dev.off()
p1
p1 <- chart.Correlation(cor_dat, histogram=TRUE, pch=20)
dev.off()
dev.off()
pdf(paste0(run_name_use,"_correlation_plot.pdf"),height=8,width=9)
chart.Correlation(cor_dat, histogram=TRUE, pch=20)
dev.off()
round(res$P, 3)
round(res$P, 5)
res <- rcorr(as.matrix(cor_dat))
round(res$r, 2)
round(res$P, 5)
p1 <- ggplot(cor_dat,aes(x=mu_short,y=mu_short.1)) + geom_point()
p2 <- ggplot(cor_dat,aes(x=mu_short,y=tau.1)) + geom_point()
p3 <- ggplot(cor_dat,aes(x=mu_short,y=tau.1)) + geom_point()
p4 <- ggplot(cor_dat,aes(x=sigma1,y=sigma2)) + geom_point()
plot_grid(p1,p2,p3,p4)
plot_grid(p1,p2,p3,p4,ncols=4)
plot_grid(p1,p2,p3,p4,ncol=4)
pdf(paste0(run_name_use,"_correlation_4_plot.pdf"),height=4,width=9)
plot_grid(p1,p2,p3,p4,ncol=4)
dev.off()
pdf(paste0(run_name_use,"_correlation_4_plot.pdf"),height=3,width=9)
plot_grid(p1,p2,p3,p4,ncol=4)
dev.off()
